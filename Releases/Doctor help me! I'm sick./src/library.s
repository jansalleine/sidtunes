                    !cpu 6510
                    !ifndef LIB_INCLUDE {
                    LIB_INCLUDE = 0 }
                    !if LIB_INCLUDE = 0 {
                    *= $0810 }

; ==============================================================================
; lib_bitmapfill
; ------------+-----------------------------------------------------------------
; depends on: | lib_memfill
; ------------+-----------------------------------------------------------------
; uses:       | A, X, Y, STACK
; ------------+-----------------------------------------------------------------
; preserves:  | A
; ------------+---+-------------------------------------------------------------
; input:      | A | fill value
;             | X | highbyte bitmap startaddress
; ------------+---+-------------------------------------------------------------
; output:     | - |
; ------------+---+-------------------------------------------------------------
!zone LIB_BITMAPFILL

lib_bitmapfill:     pha
                    txa
                    clc
                    adc #$1f
                    sta .last_high+2
                    tay
                    pla
                    jsr lib_memfill
                    ldx #$3f
.last_high:         sta $0000,x
                    dex
                    bpl .last_high
                    rts
; ==============================================================================

; ==============================================================================
; lib_colramfill
; ------------+-----------------------------------------------------------------
; depends on: | -
; ------------+-----------------------------------------------------------------
; uses:       | A, X
; ------------+-----------------------------------------------------------------
; preserves:  | A
; ------------+---+-------------------------------------------------------------
; input:      | A | fill value
; ------------+---+-------------------------------------------------------------
; output:     | - |
; ------------+---+-------------------------------------------------------------
!zone LIB_COLRAMFILL

lib_colramfill:     ldx #$00
-                   sta $d800+$000,x
                    sta $d800+$100,x
                    sta $d800+$200,x
                    sta $d800+$2e8,x
                    inx
                    bne -
                    rts
; ==============================================================================

; ==============================================================================
; lib_hex2screen
; ------------+-----------------------------------------------------------------
; depends on: | -
; ------------+-----------------------------------------------------------------
; uses:       | A, X
; ------------+-----------------------------------------------------------------
; preserves:  | Y
; ------------+---+-------------------------------------------------------------
; input:      | A | hexvalue to be converted
; ------------+---+-------------------------------------------------------------
; output:     | A | petscii/screencode high nibble
;             | X | petscii/screencode low nibble
; ------------+---+-------------------------------------------------------------
!zone LIB_HEX2SCREEN

lib_hex2screen:     sta .savea+1
                    and #%00001111
                    tax
                    lda .hextab,x
                    sta .low_nibble+1
.savea              lda #0
                    lsr
                    lsr
                    lsr
                    lsr
                    tax
                    lda .hextab,x           ; high nibble
.low_nibble         ldx #0
                    rts
.hextab:            !scr "0123456789abcdef"
; ==============================================================================

; ==============================================================================
; lib_memfill
; ------------+-----------------------------------------------------------------
; depends on: | -
; ------------+-----------------------------------------------------------------
; uses:       | A, X, Y
; ------------+-----------------------------------------------------------------
; preserves:  | A
; ------------+---+-------------------------------------------------------------
; input:      | A | fill value
;             | X | highbyte fill startaddress
;             | Y | highbyte fill endaddress
; ------------+---+-------------------------------------------------------------
; output:     | - |
; ------------+---+-------------------------------------------------------------
!zone LIB_MEMFILL

lib_memfill:        stx .from_hi+2
                    sty .to_hi+1
.loop:              ldx #0
.from_hi:           sta $0000,x
                    inx
                    bne .from_hi
                    inc .from_hi+2
                    ldy .from_hi+2
.to_hi:             cpy #0
                    bne .loop
                    rts
; ==============================================================================

; ==============================================================================
; lib_vidmemfill
; ------------+-----------------------------------------------------------------
; depends on: | -
; ------------+-----------------------------------------------------------------
; uses:       | A, X
; ------------+-----------------------------------------------------------------
; preserves:  | A
; ------------+---+-------------------------------------------------------------
; input:      | A | fill value
;             | X | highbyte vidmem startaddress
; ------------+---+-------------------------------------------------------------
; output:     | - |
; ------------+---+-------------------------------------------------------------
!zone LIB_VIDMEMFILL

lib_vidmemfill:     stx .mod1+2
                    inx
                    stx .mod2+2
                    inx
                    stx .mod3+2
                    stx .mod4+2
                    ldx #$00
.mod1:              sta $0000,x
.mod2:              sta $0000,x
.mod3:              sta $0000,x
.mod4:              sta $00e8,x
                    inx
                    bne .mod1
                    rts
; ==============================================================================
